using HeartLog.SimpleDbTool.Attribute;
using HeartLog.SimpleDbTool.Enum;
using HeartLog.SimpleDbTool.Interface;
using System.Text;

namespace HeartLog.SimpleDbTool.SimpleORM
{
    public class SimpleOrmCore
    {
        /// <summary>
        /// Generate insert SQL
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model">模型</param>
        /// <param name="isNeedAutoKey">是否需要包含自增主键</param>
        /// <returns></returns>
        public static string GenerateInsertSql<T>(T model, bool isNeedAutoKey = false) where T : ISimpleOrm
        {
            var type = typeof(T);
            var tableAttrs = type.GetCustomAttributes(typeof(TableAttribute), false);
            if (tableAttrs == null || tableAttrs.Length < 1)
                return string.Empty;

            StringBuilder insertSql = new StringBuilder();
            StringBuilder values = new StringBuilder();

            insertSql.Append("INSERT INTO ");
            insertSql.Append(((TableAttribute)tableAttrs[0]).TableName + "(");

            values.Append("(");

            var props = type.GetProperties();
            foreach (var prop in props)
            {
                var columnAttrs = prop.GetCustomAttributes(typeof(ColumnAttribute), false);
                if (columnAttrs != null && columnAttrs.Length > 0)
                {
                    var columnName = ((ColumnAttribute)columnAttrs[0]).ColumnName;
                    var isAutoGeneKey = ((ColumnAttribute)columnAttrs[0]).IsAutoGeneratedKey;
                    var columnType = ((ColumnAttribute)columnAttrs[0]).ColumnType;
                    // Ignore auto generated primary key
                    if (!isNeedAutoKey && isAutoGeneKey)
                        continue;
                    else
                    {
                        insertSql.Append(columnName + ",");
                        if (columnType == ColumnType.INTEGER)
                        {
                            if (prop.GetValue(model) == null)
                                values.Append("0,");
                            else
                                values.Append(prop.GetValue(model)?.ToString() + ",");
                        }
                        else if (columnType == ColumnType.TEXT)
                        {
                            if (prop.GetValue(model) == null)
                                values.Append("\'\',");
                            else
                                values.Append("'" + prop.GetValue(model)?.ToString() + "',");
                        }
                        else if (columnType == ColumnType.ENUM)
                        {
                            if (prop.GetValue(model) == null)
                                values.Append("0,");
                            else
                                values.Append(((int)prop.GetValue(model)).ToString() + ",");
                        }
                        else
                        {
                            if (prop.GetValue(model) == null)
                                values.Append("\'\',");
                            else
                                values.Append("'" + prop.GetValue(model)?.ToString() + "',");
                        }
                    }
                }
            }
            insertSql.Remove(insertSql.Length - 1, 1);
            values.Remove(values.Length - 1, 1);
            insertSql.Append(") values");
            values.Append(");");
            insertSql.Append(values);
            return insertSql.ToString();
        }

        /// <summary>
        /// Generate delete SQL
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model">model, object of type T</param>
        /// <returns></returns>
        public static string GenerateDeleteSql<T>(T model) where T : ISimpleOrm
        {
            var type = typeof(T);

            // Get table name
            var tableAttrs = type.GetCustomAttributes(typeof(TableAttribute), false);
            if (tableAttrs == null || tableAttrs.Length <= 0)
                return string.Empty;

            // delete from table_name where pk = ...
            StringBuilder delSqlStr = new();
            delSqlStr.Append("DELETE FROM ");

            var tableName = ((TableAttribute)tableAttrs[0]).TableName;
            delSqlStr.Append(tableName + " WHERE ");

            // Find Primary Key
            // Get all props
            var props = type.GetProperties();
            foreach (var prop in props)
            {
                var columnAttrs = prop.GetCustomAttributes(typeof(ColumnAttribute), false);
                if (columnAttrs != null && columnAttrs.Length > 0)
                {
                    // Current prop is primary key
                    if (((ColumnAttribute)columnAttrs[0]).IsPrimaryKey)
                    {
                        var columnName = ((ColumnAttribute)columnAttrs[0]).ColumnName;
                        var isAutoGeneKey = ((ColumnAttribute)columnAttrs[0]).IsAutoGeneratedKey;
                        var columnType = ((ColumnAttribute)columnAttrs[0]).ColumnType;

                        delSqlStr.Append(columnName + " = ");

                        if (columnType == ColumnType.INTEGER)
                        {
                            if (prop.GetValue(model) == null)
                                return string.Empty;
                            delSqlStr.Append(prop.GetValue(model)?.ToString() + " AND ");
                        }
                        else
                        {
                            if (prop.GetValue(model) == null)
                                return string.Empty;
                            delSqlStr.Append("'" + prop.GetValue(model)?.ToString() + "'" + " AND ");
                        }
                    }

                }
            }
            delSqlStr.Append(";");
            delSqlStr.Replace(" AND ;", ";");
            return delSqlStr.ToString();
        }

        /// <summary>
        /// Generate select SQL
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="model"></param>
        /// <returns></returns>
        public static string GenerateSelectSql<T>(T model)
        {
            var type = typeof(T);

            // Get table name
            var tableAttrs = type.GetCustomAttributes(typeof(TableAttribute), false);
            if (tableAttrs == null || tableAttrs.Length <= 0)
                return string.Empty;

            // delete from table_name where pk = ...
            StringBuilder selectSqlStr = new();
            selectSqlStr.Append("SELECT * FROM ");
            var tableName = ((TableAttribute)tableAttrs[0]).TableName;
            if (model == null)
                return $"SELECT * FROM {tableName}";
            selectSqlStr.Append(tableName + " WHERE ");

            // Find Primary Key
            // Get all props
            var props = type.GetProperties();
            foreach (var prop in props)
            {
                var columnAttrs = prop.GetCustomAttributes(typeof(ColumnAttribute), false);
                if (columnAttrs != null && columnAttrs.Length > 0)
                {
                    // Current prop is primary key
                    if (((ColumnAttribute)columnAttrs[0]).IsPrimaryKey)
                    {
                        var columnName = ((ColumnAttribute)columnAttrs[0]).ColumnName;
                        var isAutoGeneKey = ((ColumnAttribute)columnAttrs[0]).IsAutoGeneratedKey;
                        var columnType = ((ColumnAttribute)columnAttrs[0]).ColumnType;

                        selectSqlStr.Append(columnName + " = ");

                        if (columnType == ColumnType.INTEGER)
                        {
                            if (prop.GetValue(model) == null)
                                return string.Empty;
                            selectSqlStr.Append(prop.GetValue(model)?.ToString() + " AND ");
                        }
                        else
                        {
                            if (prop.GetValue(model) == null)
                                return string.Empty;
                            selectSqlStr.Append("'" + prop.GetValue(model)?.ToString() + "'" + " AND ");
                        }
                    }

                }
            }
            selectSqlStr.Append(";");
            selectSqlStr.Replace(" AND ;", ";");
            return selectSqlStr.ToString();
        }
    }
}
